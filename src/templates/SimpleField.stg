SimpleField(var) ::= <<
package $var.packageName$;

import java.lang.reflect.Field;

/** A runtime error throwing version of {@link Field\}
 * @author TeamworkGuy2
 * @since 2015-03-29
 */
@javax.annotation.Generated("StringTemplate")
public class $var.className$ {
	private Field field;


	public SimpleField(Field field) {
		this.field = field;
	\}


	public Field getField() {
		return this.field;
	\}


	public Class<?> getDeclaringClass() {
		return this.field.getDeclaringClass();
	\}


	public Class<?> getType() {
		return this.field.getType();
	\}


	public String getName() {
		return this.field.getName();
	\}


	@Override
	public boolean equals(Object obj) {
		return this.field.equals(obj);
	\}


	@Override
	public int hashCode() {
		return this.field.hashCode();
	\}


	@Override
	public String toString() {
		return this.field.toString();
	\}


	public Object get(Object obj) {
		try {
			return this.field.get(obj);
		\} catch (IllegalArgumentException | IllegalAccessException e) {
			throw new RuntimeException(e);
		\}
	\}

$var.primitiveTypes:{type |


	public $type.type$ get$type.typeShortTitleCase$(Object obj) {
		try {
			return this.field.get$type.typeShortTitleCase$(obj);
		\} catch (IllegalArgumentException | IllegalAccessException e) {
			throw new RuntimeException(e);
		\}
	\}

}$$var.primitiveTypes:{type | 	
	public void set$type.objectType$(Object obj, $type.type$ z) {
		try {
			this.field.set$type.typeShortTitleCase$(obj, z);
		\} catch (IllegalArgumentException | IllegalAccessException e) {
			throw new RuntimeException(e);
		\}
	\}

}$
	public static <T> SimpleField createSimpleField(Class<T> clazz, String name) {
		try {
			Field field = clazz.getField(name);
			return new SimpleField(field);
		} catch (NoSuchFieldException | SecurityException e) {
			throw new RuntimeException(e);
		}
	}


	public static <T> SimpleField createSimpleDeclaredField(Class<T> clazz, String name) {
		try {
			Field field = clazz.getDeclaredField(name);
			return new SimpleField(field);
		} catch (NoSuchFieldException | SecurityException e) {
			throw new RuntimeException(e);
		}
	}

\}

>>
