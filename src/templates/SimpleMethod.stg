SimpleMethod(var) ::= <<
package $var.packageName$;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

/**
 * @author TeamworkGuy2
 * @since 2015-03-29
 */
@javax.annotation.Generated("StringTemplate")
public class $var.className$ {
	private Method method;


	public SimpleMethod(Method method) {
		this.method = method;
	\}


	public Method getMethod() {
		return this.method;
	\}


	public Class<?> getDeclaringClass() {
		return this.method.getDeclaringClass();
	\}


	public String getName() {
		return this.method.getName();
	\}


	@Override
	public boolean equals(Object obj) {
		return this.method.equals(obj);
	\}


	@Override
	public int hashCode() {
		return this.method.hashCode();
	\}


	@Override
	public String toString() {
		return this.method.toString();
	\}


	public Object invoke(Object obj, Object... args) {
		try {
			return this.method.invoke(obj, args);
		\} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
			throw new RuntimeException(e);
		\}
	\}


	public <T> T invoke(Class<T> expectedReturnType, Object obj, Object... args) {
		try {
			Object res = this.method.invoke(obj, args);
			if(!expectedReturnType.isInstance(obj)) {
				throw new RuntimeException(this.getName() + " expected return value is not a " + expectedReturnType.getSimpleName());
			\}
			@SuppressWarnings("unchecked")
			T resT = (T)res;
			return resT;
		\} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
			throw new RuntimeException(e);
		\}
	\}

$var.primitiveTypes:{type |


	public $type.type$ invoke$type.typeShortTitleCase$(Object obj, Object... args) {
		try {
			Object res = this.method.invoke(obj, args);
			if(!(res instanceof $type.objectType$)) {
				throw new RuntimeException(this.getName() + " expected return value is not a $type.type$");
			\}
			return ($type.type$)res;
		\} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
			throw new RuntimeException(e);
		\}
	\}

}$
$var.arrayTypes:{type |
	public $type.type$[] invoke$type.typeShortTitleCase$Array(Object obj, Object... args) {
		try {
			Object res = this.method.invoke(obj, args);
			if(!(res instanceof $type.type$[])) {
				throw new RuntimeException(this.getName() + " expected return value is not a $type.type$[]");
			\}
			return ($type.type$[])res;
		\} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
			throw new RuntimeException(e);
		\}
	\}


}$\}

>>
